{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","API_URL","getPokemonImage","id","concat","Module","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","pokemonInfo","ArrOfAbilities","fetch","then","response","json","data","push","abilities","setState","pokemonId","modalius","react_default","a","createElement","style","height","width","position","float","backgroundColor","onClick","onClose","bind","src","alignContent","getPokemonInfo","Component","App","_this2","pokemons","search","showModal","modalId","gottaCatchEmAll","_this3","results","field","_this4","myKindOfData","event","_this5","refs","searchInput","value","url","split","_this6","console","log","pokeStyle","margin","borderStyle","textAlign","slice","filter","pokemon","type","name","map","item","handleOpenModal","getIdFromUrl","class","handleFilterButtons","ref","handleSearch","App_Module","handleCloseModal","display","flexWrap","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,yNCOlCC,iCAAU,8BAgBhB,SAASC,EAAgBC,GACvB,kFAAAC,OAAmFD,EAAnF,YAqBIE,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,YAAa,IAJER,8EASJJ,GACb,IAAIa,EAAiB,GACrBC,MAAK,qCAAAb,OAAsCD,IACxCe,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAI,OAAIL,EAAeM,KAAKD,EAAKE,aACzCb,KAAKc,SAASR,oCAgBHN,KAAKJ,MAAMmB,UAXtB,IAYMC,EAAWC,EAAAC,EAAAC,cAAA,OAAKC,MAZH,CACjBC,OAAQ,QACRC,MAAO,QACPC,SAAU,WACVC,MAAO,SACPC,gBAAiB,qBAQjBC,QAAS1B,KAAKJ,MAAM+B,QAAQC,KAAK5B,OACjCiB,EAAAC,EAAAC,cAAA,eACAF,EAAAC,EAAAC,cAAA,OAAKU,IAAKrC,EAAgBQ,KAAKJ,MAAMmB,WAAYK,MAPhC,CACjBU,aAAc,YAOdb,EAAAC,EAAAC,cAAA,YAAOnB,KAAK+B,eAAe/B,KAAKJ,MAAMmB,aAGxC,OAAOE,EAAAC,EAAAC,cAAA,WAAMH,UAvCIgB,aAqLNC,cAzIb,SAAAA,EAAYrC,GAAO,IAAAsC,EAAA,OAAApC,OAAAC,EAAA,EAAAD,CAAAE,KAAAiC,IACjBC,EAAApC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAmC,GAAA9B,KAAAH,KAAMJ,KAEDQ,MAAQ,CACX+B,SAAU,GACVC,OAAQ,GACRC,WAAW,EACXC,QAAS,IAPMJ,mFAejBlC,KAAKuC,4DAGW,IAAAC,EAAAxC,KAChB,OAAOO,MAAMhB,EAAU,uBACpBiB,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAI,OAAI6B,EAAK1B,SAAS,CAAEqB,SAAUxB,EAAK8B,oDAGjCC,GAAO,IAAAC,EAAA3C,KACrB,OAAOO,MAAK,GAAAb,OAAIH,EAAJ,SAAAG,OAAmBgD,IAC5BlC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAI,OAAIgC,EAAKC,2DAGHF,EAAOG,GAAO,IAAAC,EAAA9C,KAE3B0C,EAKLnC,MAAK,kCAAAb,OAAmCgD,IACrClC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAI,OAAImC,EAAKF,aAAajC,KAC/BH,KAAK,SAAAG,GAAI,OAAImC,EAAKhC,SAAS,CAC1BqB,SAAUxB,MARZX,KAAKuC,0DAeO9C,GAEdO,KAAKc,SAAS,CACZuB,WAAW,EACXC,QAAS7C,+CAKXO,KAAKc,SAAS,CACZuB,WAAW,2CAKbrC,KAAKc,SAAS,CAAEsB,OAAQpC,KAAK+C,KAAKC,YAAYC,6CAInCC,GACX,OAAOA,EAAIC,MAAM,KAAK,oCAIf,IAAAC,EAAApD,KACPqD,QAAQC,IAAItD,KAAKI,MAAMiC,WAGvB,IAOMkB,EAAY,CAChBC,OAAQ,OACRC,YAAa,SACbC,UAAW,UAIPvB,EAAWnC,KAAKI,MAAM+B,SAASwB,QAClCC,OAAO,SAAAC,GAAO,OAAKT,EAAKhD,MAAMwD,QACtBC,EAAQC,MAAQV,EAAKhD,MAAMwD,SACnCA,OAAO,SAAAC,GAAO,OAAKT,EAAKhD,MAAMgC,QACtByB,EAAQE,MAAQX,EAAKhD,MAAMgC,SACnC4B,IAAI,SAACC,GAAD,OAAUhD,EAAAC,EAAAC,cAAA,OAAKC,MAAOmC,GACzBtC,EAAAC,EAAAC,cAAA,OAAKO,QAAS0B,EAAKc,gBAAgBtC,KAAKwB,EAAMA,EAAKe,aAAaF,EAAKf,OACnEjC,EAAAC,EAAAC,cAAA,SAAI8C,EAAKF,MACT9C,EAAAC,EAAAC,cAAA,OAAKU,IAAG,4EAAAnC,OAA8E0D,EAAKe,aAAaF,EAAKf,KAArG,cAcd,OACEjC,EAAAC,EAAAC,cAAA,OAAKiD,MAAM,WACTnD,EAAAC,EAAAC,cAAA,OAAKiD,MAAM,UACTnD,EAAAC,EAAAC,cAAA,UAAQO,QAAS1B,KAAKqE,oBAAoBzC,KAAK5B,KAAM,OAArD,QACAiB,EAAAC,EAAAC,cAAA,UAAQO,QAAS1B,KAAKqE,oBAAoBzC,KAAK5B,KAAM,OAArD,SACAiB,EAAAC,EAAAC,cAAA,UAAQO,QAAS1B,KAAKqE,oBAAoBzC,KAAK5B,KAAM,MAArD,OACAiB,EAAAC,EAAAC,cAAA,UAAQO,QAAS1B,KAAKqE,oBAAoBzC,KAAK5B,KAAM,MAArD,UACAiB,EAAAC,EAAAC,cAAA,UAAQO,QAAS1B,KAAKqE,oBAAoBzC,KAAK5B,KAAM,MAArD,UACAiB,EAAAC,EAAAC,cAAA,UAAQO,QAAS1B,KAAKqE,oBAAoBzC,KAAK5B,KAAM,KAArD,QAEFiB,EAAAC,EAAAC,cAAA,OAAKiD,MAAM,UACTnD,EAAAC,EAAAC,cAAA,SAAO2C,KAAK,OAAOQ,IAAI,gBACvBrD,EAAAC,EAAAC,cAAA,UAAQO,QAAS1B,KAAKuE,aAAa3C,KAAK5B,OAAxC,WAEDA,KAAKI,MAAMiC,WAAcpB,EAAAC,EAAAC,cAACqD,EAAD,CAAQ7C,QAAS3B,KAAKyE,iBAAkB1D,UAAWf,KAAKI,MAAMkC,UAExFrB,EAAAC,EAAAC,cAAA,OAAKC,MApDM,CACbsD,QAAS,OACTC,SAAU,OACV7C,aAAc,eAkDTK,WAlIOH,aC5EE4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjE,EAAAC,EAAAC,cAACgE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhF,KAAK,SAAAiF,GACjCA,EAAaC","file":"static/js/main.bf48b2fe.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { HashRouter as Router, Route, Link } from 'react-router-dom';\nimport axios from \"axios\";\nimport { Z_FILTERED } from 'zlib';\nimport { isAbsolute } from 'path';\nconst API_URL = \"https://pokeapi.co/api/v2/\"\nconst API_URL2 = \"https://pokeapi.co/api/v2/type/\"\n\n\n\n/* function gottaCatchEmAll() {\n  return axios.get(API_URL)\n    .then(({ data }) => data.results)\n    .then(({ data }) => this.setState({ data }))\n    .catch((err) => console.log(err));;\n} */\n\n\n\n/* const axios = require('axios'); */\n\nfunction getPokemonImage(id) {\n  return `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${id}.png`\n}\nfunction getPokemonInfo(id) {\n  let ArrOfAbilities = [];\n  fetch(`https://pokeapi.co/api/v2/pokemon/${id}`)\n    .then(response => response.json())\n    .then(data => ArrOfAbilities.push(data.abilities))\n\n  console.log(ArrOfAbilities)\n/*   console.log(ArrOfAbilities.map((item, i) => console.log(item.abilities[i].ability.name)))\n */}\nfunction myKindOfData(data) {\n  let sum = [];\n  let arrOfPokes = data.pokemon\n  arrOfPokes.forEach(item => sum.push(item.pokemon))\n  return sum\n}\n\n\n\n\nclass Module extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      pokemonInfo: \"\"\n    }\n\n\n  }\n  getPokemonInfo(id) {\n    let ArrOfAbilities = [];\n    fetch(`https://pokeapi.co/api/v2/pokemon/${id}`)\n      .then(response => response.json())\n      .then(data => ArrOfAbilities.push(data.abilities))\n    this.setState(ArrOfAbilities)\n  }\n\n  render() {\n    /* console.log(this.state) */\n    const modalStyle = {\n      height: \"100vh\",\n      width: \"100vh\",\n      position: \"absolute\",\n      float: \"center\",\n      backgroundColor: \"rgb(3, 4, 2, 0.3)\",\n\n    }\n    const imageStyle = {\n      alignContent: \"center\"\n    }\n    const id = this.props.pokemonId\n    const modalius = <div style={modalStyle}\n      onClick={this.props.onClose.bind(this)}>\n      <h1>{}></h1>\n      <img src={getPokemonImage(this.props.pokemonId)} style={imageStyle}></img>\n      <info>{this.getPokemonInfo(this.props.pokemonId)}</info>\n    </div>\n\n    return <div>{modalius}</div>\n  }\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      pokemons: [],\n      search: \"\",\n      showModal: false,\n      modalId: \"\"\n    }\n\n  }\n\n\n  componentDidMount() {\n\n    this.gottaCatchEmAll()\n  }\n\n  gottaCatchEmAll() {\n    return fetch(API_URL + \"pokemon/?limit=1000\")\n      .then(response => response.json())\n      .then(data => this.setState({ pokemons: data.results }))\n\n  }\n  gottaCatchTypes(field) {\n    return fetch(`${API_URL}type/${field}`)\n      .then(response => response.json())\n      .then(data => this.myKindOfData)\n  }\n\n  handleFilterButtons(field, event) {\n\n    if (!field) {\n      this.gottaCatchEmAll()\n      return\n    }\n\n    fetch(`https://pokeapi.co/api/v2/type/${field}`)\n      .then(response => response.json())\n      .then(data => this.myKindOfData(data))\n      .then(data => this.setState({\n        pokemons: data\n      }))\n\n  }\n\n\n\n  handleOpenModal(id) {\n\n    this.setState({\n      showModal: true,\n      modalId: id\n    })\n\n  }\n  handleCloseModal() {\n    this.setState({\n      showModal: false\n    })\n  }\n\n  handleSearch() {\n    this.setState({ search: this.refs.searchInput.value })\n\n  }\n\n  getIdFromUrl(url) {\n    return url.split('/')[6]\n  }\n\n\n  render() {\n    console.log(this.state.showModal);\n\n\n    const styles = {\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      alignContent: \"flex-start\"\n\n    };\n\n    const pokeStyle = {\n      margin: \"10px\",\n      borderStyle: \"dotted\",\n      textAlign: \"center\"\n    }\n\n\n    const pokemons = this.state.pokemons.slice()\n      .filter(pokemon => !this.state.filter ?\n        true : pokemon.type == this.state.filter)\n      .filter(pokemon => !this.state.search ?\n        true : pokemon.name == this.state.search)\n      .map((item) => <div style={pokeStyle}>\n        <div onClick={this.handleOpenModal.bind(this, this.getIdFromUrl(item.url))}>\n          <p>{item.name}</p>\n          <img src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${this.getIdFromUrl(item.url)}.png`}></img>\n\n        </div>\n      </div>)\n\n    /*  const modal = <div style={modalStyle}\n       onClick={this.handleCloseModal.bind(this)}>\n       <h1>{this.state.modalId}></h1>\n \n       <img src={getPokemonImage(this.state.modalId)} style={imageStyle}></img>\n \n     </div> */\n\n\n    return (\n      <div class=\"wrapper\">\n        <div class=\"filter\">\n          <button onClick={this.handleFilterButtons.bind(this, \"10\")}>Fire</button>\n          <button onClick={this.handleFilterButtons.bind(this, \"12\")}>Grass</button>\n          <button onClick={this.handleFilterButtons.bind(this, \"7\")}>Bug</button>\n          <button onClick={this.handleFilterButtons.bind(this, \"3\")}>Flying</button>\n          <button onClick={this.handleFilterButtons.bind(this, \"1\")}>Normal</button>\n          <button onClick={this.handleFilterButtons.bind(this, \"\")}>All</button>\n        </div>\n        <div class=\"search\">\n          <input type=\"text\" ref=\"searchInput\"></input>\n          <button onClick={this.handleSearch.bind(this)}>Search\n          </button></div>\n        {this.state.showModal && (<Module onClose={this.handleCloseModal} pokemonId={this.state.modalId}></Module>)\n        }\n        <div style={styles}>\n          {pokemons}\n        </div>\n      </div >\n    );\n  }\n}\n\n\nexport default App;\n\n/*{showModal && (<div styles={modalStyles}>\n<p>showing modal</p>\n<button onClick= this.handleclose modal\n</div>)}\n*/\n\n// height : 100vh (view hight)\n/* position: absolute:\nleft 0\ntop 0\n\nbackgroundColor: rbg(0,0,0,1) (sista värdet är ett alfavärde som är transparans från 0 till 1) */\n/*\ninital state : loading...\nconst {data } = this.stae  */","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}